namespace Hero {
    enum e_rarity {
        common,
        uncommon,
        rare,
        magical,
        legendary
    }

    enum e_class {
        bard,
        fighter,
        mage,
        paladin,
        ranger,
        max
    }

    enum e_species {
        human,
        leo,
        elve,
        draco,
        max
    }

    entity __def {
        id: byte_array;
        e_rarity;
        e_class;
        e_species;
        health: integer;
    }

    function construct(player: Player.__def, hero_struct: struct<__def>) {
        var hero = create Hero.__def (hero_struct);
        create PlayerHero.__def (hero, player);
        return hero;
    }
    
    function get(hero_id: byte_array) {
        return __def @* {hero_id};
    }

    function get_all(hero_ids: list<byte_array>) {
        return __def @* {.id in hero_ids};
    }

    function get_health(rarity: e_rarity, classs: e_class) {
        val base = map<e_class, integer>([
            e_class.fighter: 120,
            e_class.paladin: 100,
            e_class.ranger: 100,
            e_class.mage: 80,
            e_class.bard: 90
        ]);
        return (base[classs] * (1 + (rarity.value / 4.0))).to_integer();
    }
    
    function get_random(increase: integer = 0) {
        return get_with_rarity(get_random_rarity(increase), increase);
    }
    
    function get_random_rarity(increase: integer = 0) {
        val chances = RARITY_CHANCE();
        val aggregate = chances @ {} (@sum $[1]) + (increase * chances.size());
        var rnd = Random.next_integer(aggregate) + 1;

        var idx = 0;
        while (true) {
            rnd -= chances[Hero.e_rarity.value(idx)] + increase;
            if (rnd <= 0)
                break;
            else
                idx++;
        }

        return Hero.e_rarity.value(idx);
    }
    
    function get_random_class() {
        var rnd = Random.next_integer(e_class.max.value);
        return e_class.value(rnd);
    }

    function get_random_species() {
        var rnd = Random.next_integer(e_species.max.value);
        return e_species.value(rnd);
    }

    function get_with_rarity(rarity: e_rarity, increase: integer = 0) {
        var classs = get_random_class();
        return struct<__def>(
            id = Random.next(),
            rarity,
            classs,
            get_random_species(),
            get_health(rarity, classs)
        );
    }

    function RARITY_CHANCE() = map<Hero.e_rarity, integer>([
        Hero.e_rarity.common: 100,
        Hero.e_rarity.uncommon: 75,
        Hero.e_rarity.rare: 50,
        Hero.e_rarity.magical: 25,
        Hero.e_rarity.legendary: 0
    ]);
}
