namespace HeroShop {
    val SELECTION_PER_PLAYER = 3;
    val REFRESH_COST = 50;

    function PRICE_MAP() = map<Hero.e_rarity, integer>([
        Hero.e_rarity.common: 100,
        Hero.e_rarity.uncommon: 150,
        Hero.e_rarity.rare: 200,
        Hero.e_rarity.magical: 250,
        Hero.e_rarity.legendary: 500
    ]);

    entity __def {
        player: Player.__def;
        index hero_id: byte_array;
        hero: byte_array;
        price: integer;
    }

    function get(player: Player.__def) {
        return __def @* {player} (
            hero = struct<Hero.__def>.from_bytes(.hero),
            price = .price
        );
    }

    function buy(player: Player.__def, id: byte_array, name) {
        val was_starting = PlayerHero.get_heroes(player).size() < 3;
        var (hero, price) = __def @ {player, .hero_id == id} (struct<mutable Hero.__def>.from_bytes(.hero), .price);
        hero.name = name;
        Player.deduct(player, price);
        Hero.construct(player, hero);
        val is_starting = PlayerHero.get_heroes(player).size() < 3;
        if (was_starting and not is_starting) {
            refresh(player);
        } else {
            delete __def @ {.hero_id == id, player};
            _refresh(player, 1, true);
        }
    }

    function refresh(player: Player.__def) {
        delete __def @* {player};
        _refresh(player, SELECTION_PER_PLAYER, false);
    }

    function _refresh(player: Player.__def, amount: integer, free: boolean) {
        val is_starting = PlayerHero.get_heroes(player).size() < 3;
        if (not (is_starting or free))
            Player.deduct(player, REFRESH_COST);

        val max_rarity = Hero.e_rarity.value(min(Hero.e_rarity.legendary.value, PlayerHero.get_highest_rarity(player).value + 1));
        for (i in range(amount)) {
            val rarity = if (is_starting) Hero.e_rarity.common else Hero.get_random_rarity(max_rarity);
            val hero =  Hero.get_with_rarity(rarity);
            val price = if (is_starting) 0 else PRICE_MAP()[hero.rarity];
            create __def (player, hero_id=hero.id, hero=hero.to_bytes(), price);
        }
    }
}

namespace ConsumableShop {
    function PRICE_MAP() = map<Consumable.e_type, integer>([
        Consumable.e_type.heal_single_small: 15,
        Consumable.e_type.heal_single_full: 60,
        Consumable.e_type.heal_party_s: 25,
        Consumable.e_type.heal_party_m: 100,
        Consumable.e_type.protect_s: 50,
        Consumable.e_type.protect_l: 200,
        Consumable.e_type.evade_encounter: 15,
        Consumable.e_type.hustle: 50
    ]);

    function buy(player: Player.__def, consumable: Consumable.e_type) {
        val price = PRICE_MAP()[consumable];
        Player.deduct(player, price);
        PlayerInventory.give(player, consumable.name, 1);
    }
}

namespace BackpackShop {
    function PRICE_MAP() = map<name, integer>([
        Backpack.name(Hero.e_rarity.uncommon): 150,
        Backpack.name(Hero.e_rarity.rare): 200,
        Backpack.name(Hero.e_rarity.magical): 250,
        Backpack.name(Hero.e_rarity.legendary): 500
    ]);

    function buy(player: Player.__def, backpack: name) {
        val price = PRICE_MAP()[backpack];
        Player.deduct(player, price);
        PlayerInventory.give(player, backpack, 1);
    }
}