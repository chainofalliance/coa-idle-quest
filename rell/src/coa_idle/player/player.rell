namespace Player {
    val AUTOGEN_MAX_RETRIES: integer = 10;

    entity __def {
        key account: ft4.acc.account;
        mutable shards: integer = 300;
    }

    function construct(account: ft4.acc.account): __def {
        return create __def(account);
    }

    function get_by_account(account: ft4.acc.account) {
        return __def @ {account};
    }

    function get_by_account_id(account_id: byte_array) {
        return __def @ {.account.id == account_id};
    }

    function does_exist(account_id: byte_array): boolean {
        return __def @? {.account.id == account_id} != null;
    }

    function deduct(player: Player.__def, shards: integer) {
        require(shards >= 0);
        require(player.shards >= shards);
        player.shards -= shards;
    }

    function give_shards(player: Player.__def, shards: integer) {
        require(shards >= 0);
        player.shards += shards;
    }
}

namespace PlayerHero {
    entity __def {
        key hero: Hero.__def;
        player: Player.__def;
    }

    function get_owner(hero: Hero.__def) {
        return __def @ {hero}.player;
    }

    function get_heroes(player: Player.__def) {
        return __def @* {player}.hero;
    }

    function get_highest_rarity(player: Player.__def) {
        val rarity = __def @? {player} (@omit @sort_desc .hero.rarity.value, .hero.rarity) limit 1;
        return if (rarity??) rarity else Hero.e_rarity.common;
    }
}

namespace PlayerInventory {
    entity __def {
        player: Player.__def;
        item: name;
        mutable amount: integer;

        key player, item;
    }

    function ensure(player: Player.__def, item: name) {
        var inv = __def @? {player, item};
        if (inv == null)
            inv = create __def (player, item , 0);

        return inv;
    }

    function give(player: Player.__def, item: name, amount: integer) {
        require(amount >= 0);
        val inv = ensure(player, item);
        inv.amount += amount;
    }

    function remove(player: Player.__def, item: name, amount: integer) {
        require(amount >= 0);
        val inv = ensure(player, item);
        require(inv.amount >= amount);
        inv.amount -= amount;
    }
}