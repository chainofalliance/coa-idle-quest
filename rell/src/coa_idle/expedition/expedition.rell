namespace Expedition {
    enum e_danger_level {
        neglible,
        harmless,
        unhealthy,
        interesting,
        seriously
    }

    entity __def {
        id: byte_array;
        player: Player.__def;
        backpack_rarity: Hero.e_rarity;
        mutable e_danger_level;
        created_at: timestamp = now();
        mutable returned: boolean = false;
    }

    function construct(
        player: Player.__def,
        heroes: list<Hero.__def>,
        items: list<Consumable.e_type>,
        e_danger_level,
        backpack: Hero.e_rarity
    ) {
        var owners = heroes @* {} (@group PlayerHero.get_owner($));
        var owner = owners[0];
        require(owners.size() == 1);
        require(owner == player);
        require(items.size() <= Backpack.CONSUMABLE_SPACE()[backpack]);

        val expedition = create __def(Random.next(), player, e_danger_level, backpack);
        ExpeditionParty.construct(expedition, heroes);

        if (backpack != Hero.e_rarity.common)
            PlayerInventory.remove(player, Backpack.name(backpack), 1);
        for (item in items) {
            PlayerInventory.remove(player, item.name, 1);
            ExpeditionConsumables.construct(expedition, item);
        }

        Challenge.next(expedition);
    }

    function get(id: byte_array) {
        return __def @ {id};
    }

    function get_all(player: Player.__def) {
        return __def @* {player} (
            id = .id,
            difficulty = .e_danger_level,
            created_at = .created_at,
            challenges = get_overview($)
        );
    }

    function get_all_ongoing(player: Player.__def) {
        return __def @* {player, .returned == false} (
            id = .id,
            difficulty = .e_danger_level,
            created_at = .created_at,
            challenges = get_overview($)
        );
    }

    function get_overview(expedition: __def) {
        val challenge = Challenge.get_active(expedition);
        return (
            party = ExpeditionParty.get_overview(expedition),
            challenge = if (challenge??) Challenge.get_overview(challenge) else null,
            arrival_at = if (challenge??) Challenge.get_arrival(challenge) else Challenge.get_retreat(expedition)
        );
    }
    
    function get_definition(expedition: __def) {
        val challenge = Challenge.get_active(expedition);
        return (
            party = ExpeditionParty.get_overview(expedition),
            challenges = Challenge.get_all(expedition),
            arrival_at = if (challenge??) Challenge.get_arrival(challenge) else Challenge.get_retreat(expedition)
        );
    }
    
    function bump_difficulty(expedition: Expedition.__def) {
        expedition.e_danger_level = e_danger_level.value(min(expedition.e_danger_level.value + 1, e_danger_level.seriously.value));
    }

    function use_consumbale(challenge: Challenge.__def, consumable: Consumable.e_type) {
        require(Challenge.cancel @? {challenge.expedition} == null);
        ExpeditionConsumables.use(challenge, consumable);
    }

    function drop_consumbale(challenge: Challenge.__def, consumable: Consumable.e_type) {
        require(Challenge.cancel @? {challenge.expedition} == null);
        ExpeditionConsumables.drop(challenge, consumable);
    }

    function finish(expedition: Expedition.__def, timestamp = now()) {
        require(not expedition.returned);
        var retreat = Challenge.cancel @ {expedition};
        require(retreat.timestamp <= timestamp);

        expedition.returned = true;
        ChallengeLoot.claim(expedition);
        ExpeditionConsumables.after_expedition(expedition);
    }
}

namespace ExpeditionParty {
    entity __def {
        expedition: Expedition.__def;
        hero: Hero.__def;
        mutable health: integer;

        key expedition, hero;
    }

    function construct(expedition: Expedition.__def, heroes: list<Hero.__def>) {
        for (hero in heroes) {
            create ExpeditionParty.__def(expedition, hero, hero.health);
        }
    }

    function get(expedition: Expedition.__def) {
        return __def @* {expedition};
    }

    function get_overview(expedition: Expedition.__def) {
        return __def @* {expedition} (
            id = .hero.id,
            rarity = .hero.e_rarity,
            classs = .hero.e_class,
            species = .hero.e_species,
            health = .health,
            max_health = .hero.health
        );
    }
    
    function is_wiped(expedition: Expedition.__def) {
        var party = ExpeditionParty.get(expedition);

        var is_dead = false;
        for (member in party)
            is_dead = is_dead or member.health > 0;

        return is_dead;
    }
}

namespace ExpeditionConsumables {
    enum e_state {
        usable,
        used,
        lost,
        returned
    }

    entity __def {
        expedition: Expedition.__def;
        type: Consumable.e_type;
        mutable state: e_state = e_state.usable;
    }

    function construct(expedition: Expedition.__def, type: Consumable.e_type) {
        create __def (expedition, type);
    }

    function use(challenge: Challenge.__def, consumable: Consumable.e_type) {
        val e = __def @ {challenge.expedition, consumable, e_state.usable} limit 1;
        Consumable.use(consumable, challenge);
        e.state = e_state.used;
    }    

    function drop(challenge: Challenge.__def, consumable: Consumable.e_type) {
        val e = __def @ {challenge.expedition, consumable, e_state.usable} limit 1;
        e.state = e_state.lost;
    }

    function on_wipe(expedition: Expedition.__def) {
        update __def @ {expedition, e_state.usable} (.state = e_state.lost);
    }

    function after_expedition(expedition: Expedition.__def) {
        val all = __def @* {expedition, e_state.usable};
        for (i in all) {
            PlayerInventory.give(expedition.player, i.type.name, 1);
            i.state = e_state.returned;
        }
    }
}