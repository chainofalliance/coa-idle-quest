namespace IExpedition {
    @extend(ft4.auth.auth_handler)
    function () = ft4.auth.add_auth_handler(
        scope = "IExpedition.start",
        flags = ["A"]
    );
    operation start(
        hero_ids: list<byte_array>,
        items: list<Consumable.e_type>,
        danger_level: Expedition.e_danger_level,
        backpack: name
    ) {
        val account = ft4.auth.authenticate();
        val player = Player.get_by_account(account);

        var heroes = Hero.get_all(hero_ids);
        Expedition.construct(player, heroes, items, danger_level, backpack);
    }

    @extend(ft4.auth.auth_handler)
    function () = ft4.auth.add_auth_handler(
        scope = "IExpedition.use_consumable",
        flags = ["A"]
    );
    operation use_consumable(expedition_id: byte_array, consumable: Consumable.e_type) {
        val account = ft4.auth.authenticate();
        val player = Player.get_by_account(account);

        var expedition = Expedition.get(expedition_id);
        require(expedition.player == player);
        Expedition.use_consumbale(expedition, consumable);
    }

    @extend(ft4.auth.auth_handler)
    function () = ft4.auth.add_auth_handler(
        scope = "IExpedition.drop_consumable",
        flags = ["A"]
    );
    operation drop_consumable(expedition_id: byte_array, consumable: Consumable.e_type) {
        val account = ft4.auth.authenticate();
        val player = Player.get_by_account(account);

        var expedition = Expedition.get(expedition_id);
        require(expedition.player == player);
        Expedition.drop_consumbale(expedition, consumable);
    }

    @extend(ft4.auth.auth_handler)
    function () = ft4.auth.add_auth_handler(
        scope = "IExpedition.drop_loot",
        flags = ["A"]
    );
    operation drop_loot(expedition_id: byte_array, artifact: name) {
        val account = ft4.auth.authenticate();
        val player = Player.get_by_account(account);

        var expedition = Expedition.get(expedition_id);
        require(expedition.player == player);
        Expedition.drop_loot(expedition, artifact);
    }

    @extend(ft4.auth.auth_handler)
    function () = ft4.auth.add_auth_handler(
        scope = "IExpedition.advance",
        flags = ["A"]
    );
    operation advance(challenge_id: byte_array, action: Challenge.e_action) {
        val account = ft4.auth.authenticate();
        val player = Player.get_by_account(account);

        var challenge = Challenge.get(challenge_id);
        require(challenge.expedition.player == player);
        Challenge.select_action(challenge, action);
    }

    @extend(ft4.auth.auth_handler)
    function () = ft4.auth.add_auth_handler(
        scope = "IExpedition.retreat",
        flags = ["A"]
    );
    operation retreat(expedition_id: byte_array) {
        val account = ft4.auth.authenticate();
        val player = Player.get_by_account(account);

        var expedition = Expedition.get(expedition_id);
        require(expedition.player == player);
        Challenge.retreat(expedition);
    }

    @extend(ft4.auth.auth_handler)
    function () = ft4.auth.add_auth_handler(
        scope = "IExpedition.finish",
        flags = ["A"]
    );
    operation finish(expedition_id: byte_array) {
        val account = ft4.auth.authenticate();
        val player = Player.get_by_account(account);

        var expedition = Expedition.get(expedition_id);
        require(expedition.player == player);
        Expedition.finish(expedition);
    }
}
