function rate_limit(account) {
    if (chain_context.args.rate_limit_active == false) return;
    
    val max_counter = chain_context.args.rate_limit_max_points;
    val recovery_time = chain_context.args.rate_limit_recovery_time;
    val stat = require(
        rl_state@?{account} (.points, .last_update), 
        "Rate limiter state not found for the account with ID: %s".format(account.id)
    );
    val delta = op_context.last_block_time - stat.last_update;
    var got_points = 0;
    var update_time = stat.last_update;

    if (delta > recovery_time) {
        got_points = delta / recovery_time;
        update_time = stat.last_update + got_points * recovery_time;
        if (got_points + stat.points > max_counter) {
            got_points = max_counter - stat.points;
            // if user is at maximum reset his 
            // timer
            update_time = op_context.last_block_time;
        }
    }
    
    require(stat.points + got_points > 0, "Insufficient rate limiter points");
    
    update rl_state @ { account } (
        .points += got_points - 1,
        .last_update = update_time
    );
}

function add_rate_limit_points(account, amount: integer) {
    var state = require(
        rl_state@?{account}, 
        "Rate limiter state not found for the account with ID: %s".format(account.id)
    );
	state.points += amount;
}

function get_rate_limit_config() {
    return (
        active = chain_context.args.rate_limit_active,
        max_points = chain_context.args.rate_limit_max_points,
        recovery_time = chain_context.args.rate_limit_recovery_time,
        points_at_account_creation = chain_context.args.rate_limit_points_at_account_creation
    );
}